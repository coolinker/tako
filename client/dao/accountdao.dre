<class name="accountdao" extends="node">
    <attribute name="user" type="string"/>
    <attribute name="password" type="string"/>
    <attribute name="tradepassword" type="string"/>
    <attribute name="source" type="string"/>
    <attribute name="availablebalance" type="number"/>
    <attribute name="lastloggedintime" type="object"/>
    <attribute name="interestlevelmin" type="number" value="1"/>
    <attribute name="interestlevelmax" type="number" value="1"/>

    <attribute name="priceperbidmin" type="number" value="100"/>
    <attribute name="priceperbidmax" type="number" value="5000"/>

    <attribute name="action"  type="string"/>
    <attribute name="status"  type="string"/>
    <method name="reset" args="acc">
        var attrs = {
            user: null,
            password: null,
            tradepassword: null,
            availablebalance: 0,
            lastloggedintime: null,
            status: null,
            action: null,
            interestlevelmin: 1,
            interestlevelmax: 1,
            priceperbidmin: 100,
            priceperbidmax: 5000,
            isloading: false
        }

        for (var att in acc) {
            attrs[att] = acc[att];
        }
        this.setAttributes(attrs);
    </method>

    <method name="update" args="attrs">
        this.setAttributes(attrs);
    </method>

    <method name="getStatusSummary">
        console.log("getStatusSummary", this.status, this.action)
        if (this.status === "invalid") {
            return this.getLoginValidatingSummary();
        } else if (this.status === "loading") {
            return <![CDATA["<span style='color:#404040;font-size: 40px'>加载中...</span><br>";]]>
        } else if (this.status === "successful") {
            return this.getAccountSummary();
        } else if (this.status === "failed") {
            return this.getStatusObjSummary();
        } else {
            console.log("this.status:", this.status)
            return "Error!";
        }
    </method>

    <method name="toJSON">
        var json = {
            user: this.user, 
            password: this.password,
            tradePassword: this.tradepassword,
            source: this.source,
            reservedBalance: this.reservedbalance,
            interestLevelMin: this.interestlevelmin,
            interestLevelMax: this.interestlevelmax,
            pricePerBidMin: this.priceperbidmin,
            pricePerBidMax: this.priceperbidmax
            };
            return json;
    </method>
    
    <method name="isAccountBiddingStarted">
        return this.action === "startAccountBidding";
    </method>

    <method name="startAccountBidding" args="callback">
        this.setAttribute("action", "startAccountBidding")
        var params = this.toJSON();
        this.setAttribute("status", "loading");
        var me = this;
        this.sendStartAccountBidding(params, function (status, resJson) {
            if (status === 200) {
                me.setAttribute("status", "successful");
            } else {
                console.log("ERROR: startAccountBidding")
                me.setAttribute("status", status);
            }

           if (callback) callback(resJson);
        });
    </method>

    <method name="stopAccountBidding" args="callback"><![CDATA[
        if (this.action==="updateAccountInfo" && status != "successful") {
            this.setAttribute("action", "stopAccountBidding")
            this.setAttribute("status", "successful");
            callback();
            return;
        }

        this.setAttribute("action", "stopAccountBidding")
        var params = this.toJSON();
        this.setAttribute("status", "loading");
        var me = this;
        this.sendStopAccountBidding(params, function (status, resJson) {
            if (status === 200) {
                me.setAttribute("status", "successful");
            } else {
                console.log("ERROR: stopAccountBidding")
                me.setAttribute("status", status);
            }

            if (callback) callback(resJson);
        });
        ]]>
    </method>
    <!--
        info: {
                            user: user,
                            source: "www.lufax.com",
                            password: pwd,
                            tradePassword: jypwd
                         };

    -->
    <method name="updateAccountInfo" args="callback">
        this.setAttribute("action", "updateAccountInfo");
        if (!this.validateLoginInfo()) {
            this.setAttribute("status", "invalid");
            callback(this)
        } else {
            this.setAttribute("status", "loading");
            var me = this;
            var params = this.toJSON();

            this.sendUpdateAccountInfo(params, function (status, resJson) {
                me.statusObj = null;
                if (status === 200) {
                    if (resJson.user) {
                        me.setAttribute("status", "successful");
                        me.lastloggedintime = new Date(resJson.loginTime);
                        me.availablebalance = resJson.availableBalance;
                    } else {
                    //{"resultId":"01","resultMsg":"NOT_EXIST_USERNAME","failedMessage":"用户名不存在","sessionId":"","lockHour":"4","lockCount":"5","failedCount":"0","userName":"coolinker1"}
                        me.setAttribute("status", "failed");
                        me.statusObj = resJson;
                    }
                    
                } else {
                    me.setAttribute("status", status);
                }

                callback(me);
        });
        }
    </method>

    <method name="getStatusObjSummary"><![CDATA[
    var str = "<span style='color:red'>"+this.statusObj.failedMessage+"</span><br>";
    return str;
    ]]>
    </method>

    <method name="getLoginValidatingSummary"><![CDATA[
        var user = this.user;
        var pwd = this.password;
        var jypwd = this.tradePassword;

        var str = "";
        if (!user) {
            str += "<span style='color:red'>*用户名不能为空</span><br>";
        } else {
            str += "用户名：<span style='color:orange;font-size: 80px;line-height:1'>" + user+"</span><br>";
        }

        if (!pwd) {
            str += "<span style='color:red'>*密码不能为空</span><br>";
        }

        if (!jypwd) {
            str += "<span style='color:red'>*交易密码不能为空</span><br>";
        }

        return str;
        ]]>
    </method>

    <method name="getAccountSummary"><![CDATA[
        var str = "<span style='color:orange;font-size: 80px;line-height:1'>" + this.user+"</span><br>";
        str += "可投金额：<span style='color:orange;'>" + this.availablebalance+"</span>元<br>";
        str += "登陆时间："+new Date(this.lastloggedintime).toLocaleString();
        return str;
    ]]>
    </method>

    <method name="validateLoginInfo">
        var user = this.user;
        var pwd = this.password;
        //var jypwd = this.tradepassword;

        return user && pwd;// && jypwd;
    </method>

    <method name="getApiUrl" args="action">
        var host = window.location.host;
        return "https://"+host+"/api?action="+action;
    </method>

    <method name="sendStartAccountBidding" args="info, callback">
        var req = this.getHttpRequest(callback);
        req.open("POST", this.getApiUrl("startAccountBidding"), true);
        req.send(JSON.stringify(info));
    </method>

    <method name="sendStopAccountBidding" args="info, callback">
        var req = this.getHttpRequest(callback);
        req.open("POST",  this.getApiUrl("stopAccountBidding"), true);
        req.send(JSON.stringify(info));
    </method>

    <method name="sendUpdateAccountInfo" args="info, callback">
        var req = this.getHttpRequest(callback);
        req.open("POST", this.getApiUrl("getAccountInfo"), true);
        req.send(JSON.stringify(info));
    </method>
    
    <method name="getHttpRequest" args="callback">
        var me = this;
        var req = new XMLHttpRequest(); 
        req.onreadystatechange =  function () { 
            if (req.readyState === 4) {
                callback(req.status, JSON.parse(req.responseText));
                <!-- if (req.status===200) {
                    me.handleResponse(JSON.parse(req.responseText));
                } else {
                    me.handleResponseError(req.status);
                } -->
            
            } 
        }; 
        return req;
    </method>

</class>