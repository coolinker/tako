<class name="orobutton" height="auto" width="360" >
    <include href="./touchdraggable.dre"/>
    <!--off: 0, ready: 1, on: 2-->
    <attribute name="status" value="0" type="number"/>
    <attribute name="istransfering" value="false" type="boolean"/>
    <attribute name="btncolor" value="#ffffff" type="string"/>
    <view height="80" x="50" y="60" width="${this.parent.width-100}" bgcolor="${this.parent.btncolor}" border="0" bordercolor="c0c0c0"></view>                    
    <view name="left" y="50" height="100" width="100" cornerradius="50" border="0"  bordercolor="c0c0c0" bgcolor="${this.parent.btncolor}" clickable="true"></view>
    <view name="mid" y="50" height="100" width="100" cornerradius="50" border="0"  bordercolor="c0c0c0" x="middle" bgcolor="${this.parent.btncolor}" clickable="true"></view>
    <view name="right" y="50" height="100" width="100" cornerradius="50" border="0"  bordercolor="c0c0c0" x="right" bgcolor="${this.parent.btncolor}" clickable="true"></view>
    <view height="78" x="50" y="61" width="${this.parent.width-100}" bgcolor="${this.parent.btncolor}"></view>

    <text name="stoptxt" x="10" y="75" text="退出" fontsize="40" color="e0e0e0"/>
    <text name="readytxt" y="75" text="登陆" x="middle" fontsize="40" color="e0e0e0"/>
    <text name="starttxt" y="75" text="投标" x="${this.parent.width-this.width-10}" fontsize="40" color="e0e0e0"/>

    <view name="btn"  with="touchdraggable" dragaxis="x" gradient="['radial', 'farthest-corner', '#8586da', '#1b2a69']" 
        y="57" x="7" width="86" height="86" cornerradius="43" border="0" bordercolor="c0c0c0">
        <view x="middle" y="middle" width="30" height="30"  gradient="['linear', 90,'rgba(192,192,192,0) 10%', 'rgba(224,224,224,0.8)  15%', 'rgba(192,192,192,0.3) 20%', 'rgba(192,192,192,0) 40%',  'rgba(224,224,224,0.8)  45%', 'rgba(192,192,192,0.3) 50%', 'rgba(192,192,192,0) 70%', 'rgba(224,224,224,0.8) 75%', 'rgba(192,192,192,0.3) 80%',  'rgba(192,192,192,0) 100%']">
        </view>

        <method name="__doTouchStart" args="event">
            this.super();
            this.classroot.stoptxt.animate({attribute:'y', to: 0 , duration:300, motion:"easyout"});
            this.classroot.readytxt.animate({attribute:'y', to: 0 , duration:300, motion:"easyout"});
            this.classroot.starttxt.animate({attribute:'y', to: 0 , duration:300, motion:"easyout"});
            this.updateText();
        </method>
        
        <method name="__doTouchEnd" args="event">
            this.super();
            this.classroot.stoptxt.animate({attribute:'y', to: 75 , duration:300, motion:"easyout"});
            this.classroot.readytxt.animate({attribute:'y', to: 75 , duration:300, motion:"easyout"});
            this.classroot.starttxt.animate({attribute:'y', to: 75, duration:300, motion:"easyout"});
            this.updateText();
        </method>
        
        <method name="updateText">
            var s = this.xToStatus(this.x);
            this.classroot.stoptxt.setAttribute("bold", s===0);
            this.classroot.readytxt.setAttribute("bold", s===1);
            this.classroot.starttxt.setAttribute("bold", s===2);
        </method>

        <method name="xToStatus" args="x">
            var pw = this.parent.width;
            var midx = x+this.width/2;
            var s = 0;
            if (midx < pw/3) s = 0;
            else if (midx < 2*pw/3) s = 1;
            else  s = 2;
            return s;
        </method>
        
        <method name="updatePosition" args="x, y">
            if (!this.disabled) {
              var s = this.xToStatus(x);
              if (s === 0) this.setAttribute('x', 7);
              else if (s === 1) this.setAttribute('x', "middle");
              else  this.setAttribute('x', this.parent.width-this.width-7);
              this.updateText();
            }
        </method>

        <handler event="onisdragging" args="dragging">
            if (dragging) {

            } else {
                var pw = this.parent.width;
                var midx = this.x+this.width/2;

                if (midx < pw/3) this.parent.doOnDrag(0);
                else if (midx < 2*pw/3) this.parent.doOnDrag(1); 
                else  this.parent.doOnDrag(2); 
            }
        </handler>
    </view>

<!-- 
    <handler event="onclick" args="event" reference="this.left">
        this.doOnClick(this.left);
    </handler>

    <handler event="onclick" args="event" reference="this.mid">
        this.doOnClick(this.mid); 
    </handler>

    <handler event="onclick" args="event" reference="this.right">
        this.doOnClick(this.right); 
    </handler> -->

    <handler event="onstatus" args="s">
        this.updateUIStatus();
    </handler>
    
    <method name="updateUIStatus">
        if (!this.inited) return;
        if (this.status === 0) {
            this.btn.setAttribute("bordercolor", "c0c0c0");
            this.btn.setAttribute("bgcolor", "c0c0c0");
            this.btn.setAttribute("x", 7);
            this.readytxt.setAttribute("text", "登陆");
        } else if (this.status === 1) {
            this.btn.setAttribute("bordercolor", "orange");
            this.btn.setAttribute("bgcolor", "c0c0c0");
            this.btn.setAttribute("x","middle");
            this.readytxt.setAttribute("text", "暂停");
        } else if (this.status === 2)  {
            this.btn.setAttribute("bordercolor", "orange");
            this.btn.setAttribute("bgcolor", "orange");
            this.btn.setAttribute("x", this.width-this.btn.width-7);
        }

        if (!this.istransfering) {
            this.setAttribute("istransfering", true);
            this.animateTransfering();
        }
    </method>
    
    <method name="animateTransfering">
        var me = this;
        this.btn.animate({attribute: 'opacity',relative: false, to: this.btn.opacity===1?0.5:1, duration: 300, motion: "linear", callback: function(){
            if (me.istransfering || me.btn.opacity != 1) {
                me.animateTransfering();
            }
        }})
    </method>

    <method name="doOnDrag" args="v"><![CDATA[
        if (this.istransfering) return;

        if (v===0 && this.status !== 0) this.setAttribute("status", 0);
        else if (v===1 && this.status === 0) this.setAttribute("status", 1);
        else if (v===1 && this.status === 2) this.setAttribute("status", 1);
        else if (v===2 && this.status === 0) this.setAttribute("status", 1);
        else if (v===2 && this.status === 1) this.setAttribute("status", 2);

    ]]>
    </method>

</class>